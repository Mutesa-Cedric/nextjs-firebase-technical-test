import { Gif } from '@/@types';
import GifCard from '@/components/gifCard';
import Head from 'next/head'
import Pagination from 'react-paginate';
import { useState } from 'react';

// passign props to the component from trending gifs with getStaticProps

export async function getStaticProps() {
  const res = await fetch(`https://api.giphy.com/v1/gifs/trending?api_key=${process.env.NEXT_PUBLIC_GIPHY_API_KEY}&limit=25&rating=g`);
  const { data } = await res.json();
  const gifs = data.map((gif: any) => {
    return {
      id: gif.id,
      title: gif.title,
      username: gif.username,
      url: gif.images.downsized_medium.url
    }
  })
  return {
    props: {
      gifs
    }
  }
}


export default function Home({ gifs }: { gifs: Gif[] }) {

  const [currentPage, setCurrentPage] = useState(0);
  const pageStart = currentPage * 3;
  const pageEnd = pageStart + 3;
  const currentPageData = gifs.slice(pageStart, pageEnd);
  const totalPages = Math.ceil(gifs.length / 3);

  const handlePageChange = ({ selected }: { selected: number }) => {
    if (selected === currentPage) return;
    if (selected < 0 || selected >= totalPages) return;
    setCurrentPage(selected);
  };

  return (
    <>
      <Head>
        <title>Giffy app | Homepage</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className='w-full h-full flex flex-col  justify-between'>

        <div className='flex flex-col space-y-8'>
          <h1 className='font-medium text-xl'>Trending GIFs</h1>

          {/* gifs */}
          <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 w-full'>
            {
              currentPageData.map(gif => (
                <GifCard key={gif.id} {...gif} />
              ))
            }
          </div>
        </div>

        {/* pagination */}
        <Pagination
          className="mt-2 mx-auto flex justify-center"
          pageCount={gifs.length / 3}
          forcePage={currentPage}
          onPageChange={({ selected }) => setCurrentPage(selected)}
          containerClassName='pagination'
          pageClassName='page-item'
          pageLinkClassName='page-link'
          activeClassName='active'
          previousClassName='previous'
          nextClassName={`next ${currentPage === totalPages - 1 ? 'disabled' : ''}`}
          disabledClassName='disabled'
          previousLinkClassName='previous-link'
          nextLinkClassName='next-link'
          breakClassName='break'
          breakLinkClassName='break-link'
          marginPagesDisplayed={1}
          pageRangeDisplayed={3}
          onPageActive={handlePageChange}
        />

      </main>
    </>
  )
}

Home.layout = "main"
